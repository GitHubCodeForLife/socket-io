#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket-io:server');
var http = require('http');
let users = [];
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,()=>{
  console.log(`SEVER on listen on port ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const io = require('socket.io')(server);
 
io.on('connection', function(socket){
  //console.log(socket.id);
   socket.on('join',(user)=>{
      // console.log(user);
       userJoin(user);
       io.emit('updateUsers',users);
   })
   socket.on('sendTo',(data)=>{
       console.log(data);  
       socket.to(data.id_receiver).emit('sendTo', data);
   });
   socket.on('disconnect',()=>{
       console.log('User leave: ',socket.id);
       userLeave(socket.id);
       io.emit('updateUsers',users);
   });

});


//User join chat 
function userJoin(data){
   users.push(data);
   console.log('Array user',users);
}

// User leaves chat
function userLeave(id) {
   const index = users.findIndex(user => user.id === id);
 
   if (index !== -1) {
     return users.splice(index, 1)[0];
   }
 }
